@use 'sass:math';

// Подключение миксинов ===========================================================
@import 'mixins';

/* FONTS */
@import url('https://fonts.googleapis.com/css?family=Plus+Jakarta+Sans:regular,500,700,800,italic&display=swap');
// Шрифт по умолчанию =============================================================
$fontFamily: 'Plus Jakarta Sans', sans-serif;
$fontSize: toRem(16);

$fontSizeSmall: toRem(14);
$fontSizeLabel: toRem(18);
$fontSizeSubtitle: toRem(24);
$fontSizeH1: toRem(76);
$fontSizeH2: toRem(48);
$fontSizeSubtitleText: toRem(32);

// Основные цвета =================================================================
@import 'colors-palette';

body {
	background-color: $bg-primary;
}
// Настройка адаптивной сетки ======================================================
// Минимальная ширина страницы
$minWidth: 320;

// Ширина полотна (макета)
$maxWidth: 1440;

// Ширина ограничивающего контейнера (0 = нет ограничения)
$maxWidthContainer: 1200;

// Общий отступ у контейнера
// (30 = по 15px слева и справа, 0 = нет отступа)
$containerPadding: 30;

// Ширина страбатывания первого брейк-поинта
$containerWidth: $maxWidthContainer + $containerPadding;

// Брейк-поинты
$pc: toEm($containerWidth); // ПК, ноутбуки, некоторые планшеты в горизонтальном положении; ширина container+2*padding
$tablet: toEm(991.98); // Планшеты, некоторые телефоны в горизонтальном положении
$mobile: toEm(767.98); // Телефоны L
$mobileSmall: toEm(479.98); // Телефоны S

$laptopL: toEm(1039.98); // Laptop L
$laptop: toEm(1023.98); // Laptop

$mobileL: toEm(424.98); // Mobile L
$mobileM: toEm(374.98); // Mobile M
$mobileS: toEm(319.98); // Mobile S

// Тип адаптива:
// 1 = отзывчивость (у контейнера нет брейкпоинтов),
// 2 = по брейк-поинтам (контейнер меняет свою ширину по брейк-поинтам)
$responsiveType: 1;

// Обнуление ======================================================================
/* NULL STYLES */
@import 'null';

// найти элемент из-за которого горизонтальный scroll
* {
	// outline: 4px solid red;
}
.section {
	// border-top: 1px solid red;
}
// Стили тега BODY =================================================================
body {
	// чтобы не скакал контент, когда открывается menu__body, если есть полоса прокрутки - плохая поддержка
	// scrollbar-gutter: stable;

	// Скролл заблокирован
	.lock & {
		overflow: hidden;
		touch-action: none;
		overscroll-behavior: none;
		// pointer-events: none;
	}
	// Сайт загружен
	.loaded & {
	}

	// полу-прозрачный черный фон при открытом выпадающем меню
	&::after {
		content: '';
		// display: block;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.7);
		// background-color: red;
		position: fixed;
		// position: absolute;
		top: 0;
		left: 0;
		opacity: 0;
		visibility: hidden;
		pointer-events: none;
		transition: all 0.3s ease 0s;

		// при показе выпадающего меню
		.menu-open & {
			z-index: 1;
			opacity: 1;
			visibility: visible;
			@media (forced-colors: active) {
				background-color: rgba(0, 0, 0, 1);
			}
		}

		// при открытии popup
		.popup-show & {
			opacity: 1;
			visibility: visible;
			z-index: 149;
			@media (forced-colors: active) {
				background-color: rgba(0, 0, 0, 1);
			}
		}
	}
}
// Оболочка wrapper ================================================================
.wrapper {
	min-height: 100%;
	display: flex;
	flex-direction: column;
	// align-items: center;
	overflow: hidden;
	@supports (overflow: clip) {
		overflow: clip;
	}

	// Прижимаем footer
	> main {
		flex: 1 1 auto;
	}

	// Фикс для слайдеров
	> * {
		min-width: 0;
	}
}

// Ограничивающий контейнер __container =====================================================
// (i) Стили будут применяться ко всем классам содержащим *__container
// Например header__container, main__container и т.д.
// Snippet (HTML): cnt

@if ($responsiveType==1) {
	// Отзывчивая
	[class*='__container'] {
		@if ($maxWidthContainer>0) {
			max-width: toRem($containerWidth);
			// margin: 0 auto;
			margin-inline: auto; // слева-справа
		}
		@if ($containerPadding>0) {
			@if ($maxWidthContainer>0) {
				// padding: 0 toRem(math.div($containerPadding, 2));
				padding-inline: toRem(math.div($containerPadding, 2));
			} @else {
				@include adaptiveValue('padding-left', math.div($containerPadding, 2), 15);
				@include adaptiveValue('padding-right', math.div($containerPadding, 2), 15);
			}
		}
	}
} @else {
	// По брейк-поинтам
	[class*='__container'] {
		margin: 0 auto;
		@if ($maxWidthContainer>0) {
			max-width: toRem($containerWidth);
		} @else {
			@if ($containerPadding>0) {
				padding: 0 toRem(math.div($containerPadding, 2));
			}
		}
		@media (max-width: $pc) {
			max-width: toRem(970);
		}
		@media (max-width: $tablet) {
			max-width: toRem(750);
		}
		@media (max-width: $mobile) {
			max-width: none;
			@if ($containerPadding>0 and $maxWidthContainer>0) {
				padding: 0 toRem(math.div($containerPadding, 2));
			}
		}
	}
}

// Подключение базовых стилей, шаблонов (заготовок) и вспомогательных классов
// Для подключения/отключения конкретных стилей смотри base.scss
@import 'base';

// Подключение стилей scrollbar
@import 'scrollbar';

// Подключение стилей общих элементов проекта
@import 'common';

// Подключение мелких стилей
@import 'others';

// Подключение стилей отдельных блоков
@import 'header';
@import 'menu';
@import 'hero';
@import 'features';
@import 'services';
@import 'reviews';
@import 'location';
@import 'footer';
@import 'popup';
